#!/usr/bin/env python3
# Inspired by the following, but completely rewritten for speed and logic:
#   https://github.com/nikitabobko/AeroSpace/issues/510#issuecomment-2439585933
#
# Don't forget to run this once to allow dragging floats with cmd+ctrl:
#   defaults write -g NSWindowShouldDragOnGesture YES

import json
import os
import re
import sys
import time

def exc(cmd):
    return os.popen(cmd).read().strip()


# On some Mac OS X versions, just aerospace doesn't work because it has minimal PATH.
AEROSPACE_BIN = "/usr/local/bin/aerospace"


CURR_WS = exc(f'{AEROSPACE_BIN} list-workspaces --focused')


def get_window_id(title):
    ret = exc(AEROSPACE_BIN + ' list-windows --all --format "%{window-id} | %{workspace} | %{window-title}"')
    for line in ret.splitlines():
        wid, ws, wtitle = line.split(' | ', maxsplit=2)
        if title in wtitle:
            return wid, ws
    return None, None


def focus_app(win_id):
    exc(f'{AEROSPACE_BIN} move-node-to-workspace {CURR_WS} --window-id {win_id}')
    exc(f'{AEROSPACE_BIN} focus --window-id {win_id}')
    exc(f'{AEROSPACE_BIN} layout floating')


def move_to_stash(win_id):
    os.system(f'{AEROSPACE_BIN} move-node-to-workspace STASH --window-id {win_id}')


def start_app():
    open_cmd = '"' + '" "'.join(sys.argv[3:]) + '"'
    if "/bin/" in sys.argv[3]:
        os.system(open_cmd)
    else:
        os.system(f'open -na {open_cmd}')


def get_display_size():
    ret = exc("osascript -e 'tell application \"Finder\" to get bounds of window of desktop'")
    _, _, w, h = ret.split(", ")
    return int(w), int(h)
    print("No res found, falling back")
    return 3420 // 2, 2214 // 2


def center_frontmost():
    if sys.argv[2] == "NOCENTER":
        return

    # it seems using only 'first window' or 'last window' (or 'front window') is not enough
    # for some applications like Brave, Obsidian that have multiple windows and using both
    # windows is necessary to centralize the focused window
    # TODO: Determine resolution of the screen automatically.
    sw, sh = get_display_size()
    w, h = sw * 3 // 4, sh * 3 // 4
    x, y = (sw - w) // 2, (sh - h) // 2
    cmd = f'''
osascript -e '
tell application "System Events" to tell first application process whose frontmost is true
  set position of first window to {{{x}, {y}}}
  set position of last window to {{{x}, {y}}}
  set size of first window to {{{w}, {h}}}
  set size of last window to {{{w}, {h}}}
end tell'
'''
    os.system(cmd)


if __name__ == '__main__':
    win_id, win_ws = get_window_id(sys.argv[1])
    if win_id is None:
        start_app()
        center_frontmost()
    elif win_ws == CURR_WS:  # Visible? -> Move to stash.
        move_to_stash(win_id)
    else:  # Invisible but exists? -> Move to front, focus.
        focus_app(win_id)
        center_frontmost()
