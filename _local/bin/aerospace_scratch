#!/usr/bin/env python
# Inspired by the following, but completely rewritten for speed and logic:
#   https://github.com/nikitabobko/AeroSpace/issues/510#issuecomment-2439585933
#
# Don't forget to run this once to allow dragging floats with cmd+ctrl:
#   defaults write -g NSWindowShouldDragOnGesture YES

import json
import os
import re
import sys
import time

def exc(cmd):
    return os.popen(cmd).read().strip()


CURR_WS = exc('aerospace list-workspaces --focused')


def get_window_id(title):
    ret = exc('aerospace list-windows --all --format "%{window-id} | %{workspace} | %{window-title}"')
    for line in ret.splitlines():
        wid, ws, wtitle = line.split(' | ', maxsplit=2)
        if title in wtitle:
            return wid, ws
    return None, None


def focus_app(win_id):
    exc(f'aerospace move-node-to-workspace {CURR_WS} --window-id {win_id}')
    exc(f'aerospace focus --window-id {win_id}')
    exc('aerospace layout floating')


def move_to_stash(win_id):
    os.system(f'aerospace move-node-to-workspace STASH --window-id {win_id}')


def start_app(open_cmd):
    os.system(f'open -na {open_cmd}')


def get_display_size():
    monitor_name = json.loads(exc("aerospace list-monitors --json --focused"))[0]["monitor-name"]
    ret = json.loads(exc("system_profiler SPDisplaysDataType -json"))
    for bus in ret["SPDisplaysDataType"]:
        for display in bus["spdisplays_ndrvs"]:
            if display["_name"] == monitor_name:
                # The string is something like "1710 x 1107 @ 60.00Hz"
                if reg := re.match(r"(\d+) x (\d+).*", display["_spdisplays_resolution"]):
                    return [int(s) for s in reg.groups()]
    print("No res found, falling back")
    return 3420 // 2, 2214 // 2


def center_frontmost():
    # it seems using only 'first window' or 'last window' (or 'front window') is not enough
    # for some applications like Brave, Obsidian that have multiple windows and using both
    # windows is necessary to centralize the focused window
    # TODO: Determine resolution of the screen automatically.
    sw, sh = get_display_size()
    w, h = sw * 3 // 4, sh * 3 // 4
    x, y = (sw - w) // 2, (sh - h) // 2
    cmd = f'''
osascript -e '
tell application "System Events" to tell first application process whose frontmost is true
  set position of first window to {{{x}, {y}}}
  set position of last window to {{{x}, {y}}}
  set size of first window to {{{w}, {h}}}
  set size of last window to {{{w}, {h}}}
end tell'
'''
    os.system(cmd)


if __name__ == '__main__':
    win_id, win_ws = get_window_id(sys.argv[1])
    if win_id is None:
        start_app(' '.join(sys.argv[2:]))
        center_frontmost()
    elif win_ws == CURR_WS:  # Visible? -> Move to stash.
        move_to_stash(win_id)
    else:  # Invisible but exists? -> Move to front, focus.
        focus_app(win_id)
        center_frontmost()
